// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AuthenticationCompleted extends ethereum.Event {
  get params(): AuthenticationCompleted__Params {
    return new AuthenticationCompleted__Params(this);
  }
}

export class AuthenticationCompleted__Params {
  _event: AuthenticationCompleted;

  constructor(event: AuthenticationCompleted) {
    this._event = event;
  }

  get success(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }

  get userAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get transactionId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get contractAddress(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get methodId(): Bytes {
    return this._event.parameters[5].value.toBytes();
  }

  get transactionTimestamp(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get transactionBlockNumber(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class InitiateAuthentication extends ethereum.Event {
  get params(): InitiateAuthentication__Params {
    return new InitiateAuthentication__Params(this);
  }
}

export class InitiateAuthentication__Params {
  _event: InitiateAuthentication;

  constructor(event: InitiateAuthentication) {
    this._event = event;
  }

  get txId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get userAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get methodId(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get transactionTimestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get transactionBlockNumber(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class ZkMask__transactionIdResult {
  value0: Address;
  value1: Bytes;
  value2: Address;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;

  constructor(
    value0: Address,
    value1: Bytes,
    value2: Address,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromFixedBytes(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }

  getUser(): Address {
    return this.value0;
  }

  getMethodId(): Bytes {
    return this.value1;
  }

  getContractAddress(): Address {
    return this.value2;
  }

  getValue(): BigInt {
    return this.value3;
  }

  getTimestamp(): BigInt {
    return this.value4;
  }

  getBlockNumber(): BigInt {
    return this.value5;
  }
}

export class ZkMask extends ethereum.SmartContract {
  static bind(address: Address): ZkMask {
    return new ZkMask("ZkMask", address);
  }

  transactionId(param0: BigInt): ZkMask__transactionIdResult {
    let result = super.call(
      "transactionId",
      "transactionId(uint256):(address,bytes4,address,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new ZkMask__transactionIdResult(
      result[0].toAddress(),
      result[1].toBytes(),
      result[2].toAddress(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt()
    );
  }

  try_transactionId(
    param0: BigInt
  ): ethereum.CallResult<ZkMask__transactionIdResult> {
    let result = super.tryCall(
      "transactionId",
      "transactionId(uint256):(address,bytes4,address,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ZkMask__transactionIdResult(
        value[0].toAddress(),
        value[1].toBytes(),
        value[2].toAddress(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt()
      )
    );
  }

  transactionVerified(param0: BigInt): boolean {
    let result = super.call(
      "transactionVerified",
      "transactionVerified(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBoolean();
  }

  try_transactionVerified(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transactionVerified",
      "transactionVerified(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class CompleteAuthenticationCall extends ethereum.Call {
  get inputs(): CompleteAuthenticationCall__Inputs {
    return new CompleteAuthenticationCall__Inputs(this);
  }

  get outputs(): CompleteAuthenticationCall__Outputs {
    return new CompleteAuthenticationCall__Outputs(this);
  }
}

export class CompleteAuthenticationCall__Inputs {
  _call: CompleteAuthenticationCall;

  constructor(call: CompleteAuthenticationCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }

  get txId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CompleteAuthenticationCall__Outputs {
  _call: CompleteAuthenticationCall;

  constructor(call: CompleteAuthenticationCall) {
    this._call = call;
  }
}

export class InitiateAuthenticationCall extends ethereum.Call {
  get inputs(): InitiateAuthenticationCall__Inputs {
    return new InitiateAuthenticationCall__Inputs(this);
  }

  get outputs(): InitiateAuthenticationCall__Outputs {
    return new InitiateAuthenticationCall__Outputs(this);
  }
}

export class InitiateAuthenticationCall__Inputs {
  _call: InitiateAuthenticationCall;

  constructor(call: InitiateAuthenticationCall) {
    this._call = call;
  }

  get txDetails(): InitiateAuthenticationCallTxDetailsStruct {
    return changetype<InitiateAuthenticationCallTxDetailsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class InitiateAuthenticationCall__Outputs {
  _call: InitiateAuthenticationCall;

  constructor(call: InitiateAuthenticationCall) {
    this._call = call;
  }
}

export class InitiateAuthenticationCallTxDetailsStruct extends ethereum.Tuple {
  get user(): Address {
    return this[0].toAddress();
  }

  get methodId(): Bytes {
    return this[1].toBytes();
  }

  get params(): Array<Bytes> {
    return this[2].toBytesArray();
  }

  get contractAddress(): Address {
    return this[3].toAddress();
  }

  get value(): BigInt {
    return this[4].toBigInt();
  }

  get timestamp(): BigInt {
    return this[5].toBigInt();
  }

  get blockNumber(): BigInt {
    return this[6].toBigInt();
  }
}
